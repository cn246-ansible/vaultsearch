#!/usr/bin/env python3
"""
Quickly "grep" ansible vault files.

Recursively search current working directory:
vaultgrep "searchterm"

Use some regex for the search query:
vaultgrep "searchterm|anotherterm" /group_vars/all

Recursively search specific directory:
vaultgrep "searchterm" host_vars/myhost
"""
import os
import re
import sys
from pathlib import Path

from ansible import constants as C
from ansible.cli import CLI
from ansible.parsing.dataloader import DataLoader
from ansible.parsing.vault import VaultLib

# Color codes
BGRN = '\033[01;92m'
BRED = '\033[01;31m'
ENDC = '\033[0m'

# First argument is search term
searchterm = sys.argv[1]
rxsearch = re.compile(searchterm)

# Second (optional) argument is path to search
if len(sys.argv) > 2:
    rootdir = Path(sys.argv[2])
else:
    rootdir = Path.cwd()

# Vars for decrypting vault files using Ansible modules
loader = DataLoader()
id_list = C.DEFAULT_VAULT_IDENTITY_LIST
vault_secret = CLI.setup_vault_secrets(loader=loader, vault_ids=id_list)
vault = VaultLib(vault_secret)

def is_vault(file_path):
    """
    Check first line of file for the string '$ANSIBLE_VAULT'

        Parameters:
            file_path (str): File path to search

        Returns:
            bool: True if vault file
    """
    with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
        if "$ANSIBLE_VAULT" in f.readline():
            return True
        return False


def find_files(search_path):
    """
    Recursively search for Ansible vault files in the provided path.

        Parameters:
            search_path (str): where to start searching for vault files

        Yields:
            p.path (str): path of all files in search_path
    """
    for p in os.scandir(search_path):
        if (p.is_file() and p.stat().st_size > 0) and is_vault(p.path):
            yield p.path
        elif p.is_dir() and not p.name == ".git":
            yield from find_files(p.path)


def decrypt_vault(file_path):
    """
    Decrypts vault encrypted files.

        Parameters:
            file_path (str) - Path of file to decrypt

        Returns:
            decrypted (str) - Bulk decrypted data
    """
    with open(file_path, "r", encoding="utf-8") as f:
        decrypted = vault.decrypt(f.read())
        decrypted = decrypted.decode("utf-8", errors="ignore")
        return decrypted


def search_bulk(contents):
    """
    Bulk search all contents for regex search term

        Parameters:
            contents (str): Content to search

        Returns:
            True if search term found
    """
    if rxsearch.search(contents):
        return True
    return False


def search_line(contents):
    """
    Search contents for search term and return the result.

        Parameters:
            contents (str): Content to search

        Returns:
            Matching result with search term colored red
    """
    match = rxsearch.search(contents)
    result = rxsearch.sub(f"{BRED}{match[0]}{ENDC}", contents)
    result = result.lstrip()
    return result


if __name__ == "__main__":
    try:
        for file in find_files(rootdir):
            data = decrypt_vault(file)
            if search_bulk(data):
                print(f"{BGRN}{file}{ENDC}")
                line_match = {x for x in data.splitlines() if rxsearch.search(x)}
                for line in line_match:
                    output = search_line(line)
                    print(f"  {output}")
                print()

    except Exception as e:
        print(e)

# vim: ft=python ts=4 sts=4 sw=4 sr et
